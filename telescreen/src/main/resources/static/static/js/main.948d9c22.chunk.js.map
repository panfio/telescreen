{"version":3,"sources":["components/TimelineWrapper.tsx","services/ApiService.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["now","Date","TimelineWrapper","items","this","props","groups","defaultTimeStart","moment","add","defaultTimeEnd","minZoom","date","React","Component","ApiService","host","path","startDate","endDate","params","from","toISOString","substring","length","to","url","URL","Object","keys","forEach","key","searchParams","append","console","log","href","fetch","then","res","json","getWrapper","apiClient","genId","i","id","App","state","title","getItems","setState","getAutotimers","e","map","push","group","name","start_time","parse","startTime","end_time","endTime","canMove","canResize","canChangeGroup","getTimeLogs","tags","description","getListenHistory","artist","listenTime","itemProps","onMouseDown","window","open","getYouTubes","time","getMediaHistory","created","style","background","getWellbeingHistory","app","start","end","onClose","setDate","Button","variant","color","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.948d9c22.chunk.js","sourcesContent":["import React from 'react';\nimport Timeline, {\n    TimelineMarkers,\n    CustomMarker,\n    CursorMarker\n} from 'react-calendar-timeline'\nimport 'react-calendar-timeline/lib/Timeline.css'\nimport moment from 'moment'\n\nconst now = Date.now()\n\ninterface Props {\n    items: any,\n    groups: any\n}\n\ninterface State {\n    items: any\n}\n\nclass TimelineWrapper extends React.Component<Props, State> {\n    render() {\n        const items  = this.props.items;\n        const groups = this.props.groups;\n        return (\n            <div>\n                <Timeline\n                    groups={groups}\n                    items={items}\n                    defaultTimeStart={moment().add(-24, 'hour')}\n                    defaultTimeEnd={moment()}\n                    minZoom={60000}>\n                    <TimelineMarkers>\n                        <CustomMarker date={now} />\n                        <CursorMarker />\n                    </TimelineMarkers>\n                </Timeline>\n            </div>\n\n        );\n    }\n}\n\nexport default TimelineWrapper;\n","\n\nclass ApiService {\n\n    /////   TODO   /////\n    host:string = 'http://localhost:8080'\n    // host:string = ''\n\n    getWrapper(path: string, startDate: Date, endDate: Date): any {\n      let from = startDate.toISOString().substring(0, startDate.toISOString().length - 1);\n      let to = endDate.toISOString().substring(0, endDate.toISOString().length - 1);\n      let params:any = { from: from , to: to }\n\n      let url = new URL(this.host + path);\n      Object.keys(params).forEach((key:any) => url.searchParams.append(key, params[key]))\n      console.log(url.href.substring(this.host.length))\n      return fetch(url.href.substring(this.host.length))\n        .then(res => res.json())\n    }\n\n    getYouTubes(startDate: Date, endDate: Date): any {\n      return this.getWrapper('/app/youtube', startDate, endDate)\n    }\n    getAutotimers(startDate: Date, endDate: Date): any { \n      return this.getWrapper('/autotimer', startDate, endDate)\n    }\n    getTimeLogs(startDate: Date, endDate: Date): any {\n      return this.getWrapper('/app/timelog', startDate, endDate)\n    }\n    getListenHistory(startDate: Date, endDate: Date): any {\n      return this.getWrapper('/app/listenhistory', startDate, endDate);  \n    }\n    getMediaHistory(startDate: Date, endDate: Date): any {\n      return this.getWrapper('/media', startDate, endDate);\n    }\n    getWellbeingHistory(startDate: Date, endDate: Date): any {\n      return this.getWrapper('/app/wellbeing', startDate, endDate);\n    }\n}\nexport default ApiService;","import React from 'react';\nimport TimelineWrapper from './components/TimelineWrapper';\nimport RangePicker from \"react-range-picker\"\nimport ApiService from './services/ApiService';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst apiClient = new ApiService();\n\nfunction id() {\n  let i = 1;\n  return function () {\n    return i++;\n  }\n}\nconst genId = id();\n\ninterface State {\n  groups: any,\n  items: any\n}\n\nclass App extends React.Component<{}, State> {\n\n  constructor(props: any) {\n    super(props);\n    const groups = [\n      { id: 1, title: 'PC time log' },\n      { id: 2, title: 'YouTube' },\n      { id: 3, title: 'TimeLog' },\n      { id: 4, title: 'Music' },\n      { id: 5, title: 'Media files' },\n      { id: 6, title: 'Android phone' }\n    ]\n    this.state = {\n      groups: groups,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    const { items } = this.getItems(new Date(Date.now() - 12000 * 12 * 1000), new Date(Date.now() + 12000 * 24 * 1000));\n    this.setState((state) => {\n      return {\n        items: items\n      }\n    });\n    console.log(\"componentDidMount()\")\n  }\n\n  getItems(startDate: Date, endDate: Date) {\n    let items: any = [];\n    apiClient.getAutotimers(startDate, endDate).then(\n      (e: any) => e.map((e: any) => items.push({\n        id: genId(),\n        group: 1,\n        title: e.name,\n        start_time: Date.parse(e.startTime),\n        end_time: Date.parse(e.endTime),\n        canMove: false,\n        canResize: false,\n        canChangeGroup: false,\n      }))\n    );\n    apiClient.getTimeLogs(startDate, endDate).then(\n      (e: any) => e.map((e: any) => items.push({\n        id: genId(),\n        group: 3,\n        title: e.tags[0] + e.description,\n        start_time: Date.parse(e.startDate),\n        end_time: Date.parse(e.endDate),\n        canMove: false,\n        canResize: false,\n        canChangeGroup: false,\n\n      }))\n    );\n    apiClient.getListenHistory(startDate, endDate).then(\n      (e: any) => e.map((e: any) => items.push({\n        id: genId(),\n        group: 4,\n        title: e.artist + e.title,\n        start_time: Date.parse(e.listenTime),\n        end_time: Date.parse(e.listenTime + 10000),\n        canMove: false,\n        canResize: false,\n        canChangeGroup: false,\n        itemProps: {\n          onMouseDown: () => {\n            window.open(e.url, '_blank');\n          }\n        }\n      }))\n    );\n    apiClient.getYouTubes(startDate, endDate).then(\n      (e: any) => e.map((e: any) => items.push({\n        id: genId(),\n        group: 2,\n        title: e.title,\n        start_time: Date.parse(e.time),\n        end_time: Date.parse(e.time) + 120000,\n        canMove: false,\n        canResize: false,\n        canChangeGroup: false,\n        itemProps: {\n          onMouseDown: () => {\n            window.open(e.url, '_blank');\n          }\n        }\n      }))\n    );\n    apiClient.getMediaHistory(startDate, endDate).then(\n      (e: any) => e.map((e: any) => items.push({\n        id: genId(),\n        group: 5,\n        title: e.path,\n        start_time: Date.parse(e.created),\n        end_time: Date.parse(e.created) + 10000,\n        canMove: false,\n        canResize: false,\n        canChangeGroup: false,\n        itemProps: {\n          onMouseDown: () => {\n            window.open(apiClient.host + e.url, '_blank');\n          },\n          style: {\n            background: 'fuchsia'\n          }\n        }\n      }))\n    );\n    apiClient.getWellbeingHistory(startDate, endDate).then(\n      (e: any) => e.map((e: any) => items.push({\n        id: genId(),\n        group: 6,\n        title: e.app,\n        start_time: Date.parse(e.startTime),\n        end_time: Date.parse(e.endTime),\n        canMove: false,\n        canResize: false,\n        canChangeGroup: false,\n      }))\n    );\n    return { items };\n  }\n\n  setDate(start: Date, end: Date) {\n    console.log(\"setDate()\" + start + \"   \" + end)\n    const { items } = this.getItems(start, end);\n    this.setState((state) => {\n      return {\n        items: items\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <TimelineWrapper items={this.state.items} groups={this.state.groups} />\n        <RangePicker\n          onClose={(start: Date, end: Date) => this.setDate(start, end)} />\n        <Button variant=\"outlined\" color=\"primary\" href=\"/process/all\">\n          Process All\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}